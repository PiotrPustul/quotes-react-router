{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","quotes","ascending","sort","quoteA","quoteB","sortQuotes","map","quote","sorting","onClick","push","pathname","list","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCmBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBC4CSC,EA1CG,SAACR,GACjB,IAAMS,EAAUC,cACVC,EAAWC,cAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAarCC,EA7BW,SAACA,EAAQC,GAC1B,OAAOD,EAAOE,MAAK,SAACC,EAAQC,GAC1B,OAAIH,EACKE,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,IAAM,EAAI,KAanBe,CAAWtB,EAAMiB,OAAQJ,GAWlBU,KAAI,SAACC,GAAD,OAC9B,cAAC,EAAD,CAEEjB,GAAIiB,EAAMjB,GACVF,OAAQmB,EAAMnB,OACdD,KAAMoB,EAAMpB,MAHPoB,EAAMjB,OAOf,OACE,qCACE,qBAAKN,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QArBe,WAG3BjB,EAAQkB,KAAK,CACXC,SAAUjB,EAASiB,SACnBb,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAgB9C,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIZ,UAAWC,IAAQ2B,KAAvB,SACGZ,Q,iBCtCMa,EATO,WACpB,OACE,sBAAK7B,UAAWC,IAAQ6B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM9B,UAAU,MAAMK,GAAG,aAAzB,6B,wBCgCS0B,UAhCG,WACf,MAA2DC,YACxDC,KACA,GAFKC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAUjD,OALAC,qBAAU,WACPL,MAEA,CAACA,IAEW,YAAXC,EAEE,qBAAKnC,UAAU,WAAf,SACG,cAACwC,EAAA,EAAD,MAKLF,EACM,mBAAGtC,UAAU,iBAAb,SAA+BsC,IAG1B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAK1D,cAAC,EAAD,CAAWzB,OAAQoB,IAJZ,cAAC,EAAD","file":"static/js/5.7981526e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link } from 'react-router-dom';\n\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id > quoteB.id ? -1 : 1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n  };\n\n  const quotes = sortedQuotes.map((quote) => (\n    <QuoteItem\n      key={quote.id}\n      id={quote.id}\n      author={quote.author}\n      text={quote.text}\n    />\n  ));\n\n  return (\n    <>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {quotes}\n      </ul>\n    </>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\n\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>Add a Quote</Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\n\nimport QuoteList from '../components/quotes/QuoteList';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\n\nconst AllQuotes = () => {\n   const { sendRequest, status, data: loadedQuotes, error } = useHttp(\n      getAllQuotes,\n      true\n   );\n\n   useEffect(() => {\n      sendRequest()\n\n   }, [sendRequest]);\n\n   if (status === 'pending') {\n      return (\n         <div className='centered'>\n            <LoadingSpinner />\n         </div>\n      );\n   }\n\n   if (error) {\n      return <p className=\"centered focus\">{error}</p>\n   }\n\n   if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n      return <NoQuotesFound />\n   }\n\n   return (\n      <QuoteList quotes={loadedQuotes} />\n   );\n};\n\nexport default AllQuotes;"],"sourceRoot":""}