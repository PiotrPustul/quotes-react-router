{"version":3,"sources":["hooks/use-input.js","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","module","exports","Card","props","className","classes","card","children","QuoteForm","isEntering","setIsEntering","trim","enteredAuthor","enteredAuthorIsValid","authorInputHasError","authorChangeHandler","authorBlurHandler","length","enteredText","enteredTextIsValid","textInputHasError","textChangeHandler","textBlurHandler","formIsValid","authorInputClass","invalid","control","textInputClass","when","message","onFocus","form","onSubmit","preventDefault","onAddQuote","author","text","isLoading","loading","LoadingSpinner","htmlFor","type","id","onChange","onBlur","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","pathname","quoteData"],"mappings":"kIAgCeA,IA9BE,SAACC,GACf,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAgBnC,MAAO,CACJK,MAAOL,EACPM,QAASF,EACTG,UAlBeH,GAAgBF,EAmB/BM,mBAjBwB,SAACC,GACzBR,EAAgBQ,EAAMC,OAAOL,QAiB7BM,iBAdsB,WACtBR,GAAa,IAcbS,MAXW,WACXX,EAAgB,IAChBE,GAAa,O,mBClBnBU,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iGCK3JC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCwF/BC,EAnFG,SAACL,GACjB,MAAoCjB,oBAAS,GAA7C,mBAAOuB,EAAP,KAAmBC,EAAnB,KAEA,EAMI1B,aAAS,SAAAQ,GAAK,MAAqB,KAAjBA,EAAMmB,UALnBC,EADT,EACEpB,MACSqB,EAFX,EAEEpB,QACUqB,EAHZ,EAGEpB,SACoBqB,EAJtB,EAIEpB,mBACkBqB,EALpB,EAKElB,iBAGF,EAMId,aAAS,SAAAQ,GAAK,OAAIA,EAAMyB,QAAU,KAL7BC,EADT,EACE1B,MACS2B,EAFX,EAEE1B,QACU2B,EAHZ,EAGE1B,SACoB2B,EAJtB,EAIE1B,mBACkB2B,EALpB,EAKExB,iBAGIyB,EAAcV,GAAwBM,EAmBtCK,EAAmBV,EAAsBT,IAAQoB,QAAUpB,IAAQqB,QACnEC,EAAiBP,EAAoBf,IAAQoB,QAAUpB,IAAQqB,QAErE,OACE,qCACE,cAAC,IAAD,CACEE,KAAMnB,EACNoB,QAAS,iBAAM,qCAEjB,cAAC,EAAD,UACE,uBAAMC,QAda,WACvBpB,GAAc,IAauBN,UAAWC,IAAQ0B,KAAMC,SA5BtC,SAACpC,GAGzB,GAFAA,EAAMqC,iBAEDV,EAIL,OAAOpB,EAAM+B,WAAW,CAAEC,OAAQvB,EAAewB,KAAMlB,KAqBnD,UACGf,EAAMkC,WACL,qBAAKjC,UAAWC,IAAQiC,QAAxB,SACE,cAACC,EAAA,EAAD,MAGJ,sBAAKnC,UAAWoB,EAAhB,UACE,uBAAOgB,QAAQ,SAAf,oBACA,uBACEC,KAAK,OACLC,GAAG,SACHC,SAAU5B,EACV6B,OAAQ5B,IAETF,GAAuB,mBAAGV,UAAU,gBAAb,wCAE1B,sBAAKA,UAAWuB,EAAhB,UACE,uBAAOa,QAAQ,OAAf,kBACA,0BACEE,GAAG,OACHG,KAAK,IACLF,SAAUtB,EACVuB,OAAQtB,IAETF,GAAqB,mBAAGhB,UAAU,gBAAb,0CAExB,qBAAKA,UAAWC,IAAQyC,QAAxB,SACE,wBAAQ1C,UAAU,MAAM2C,QA7CJ,WAC5BrC,GAAc,IA4CN,kC,gBCtDGsC,UAtBE,WACd,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACDC,EAAQG,KAAK,CACVC,SAAU,cAIhB,CAACL,EAAQC,IAMZ,OACG,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBlB,WALvB,SAACwB,GACtBP,EAAYO","file":"static/js/6.4db15c2a.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useInput = (validateValue) => {\n   const [enteredValue, setEnteredValue] = useState('');\n   const [isTouched, setIsTouched] = useState(false);\n\n   const valueIsValid = validateValue(enteredValue);\n   const hasError = !valueIsValid && isTouched;\n\n   const valueChangeHandler = (event) => {\n      setEnteredValue(event.target.value);\n   };\n\n   const inputBlurHandler = () => {\n      setIsTouched(true);\n   };\n\n   const reset = () => {\n      setEnteredValue('');\n      setIsTouched(false);\n   };\n\n   return {\n      value: enteredValue,\n      isValid: valueIsValid,\n      hasError,\n      valueChangeHandler,\n      inputBlurHandler,\n      reset\n   };\n};\n\nexport default useInput;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"invalid\":\"QuoteForm_invalid__2g1ml\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport useInput from '../../hooks/use-input';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const {\n    value: enteredAuthor,\n    isValid: enteredAuthorIsValid,\n    hasError: authorInputHasError,\n    valueChangeHandler: authorChangeHandler,\n    inputBlurHandler: authorBlurHandler,\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredText,\n    isValid: enteredTextIsValid,\n    hasError: textInputHasError,\n    valueChangeHandler: textChangeHandler,\n    inputBlurHandler: textBlurHandler,\n  } = useInput(value => value.length >= 5);\n\n  const formIsValid = enteredAuthorIsValid && enteredTextIsValid;\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    return props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  };\n\n  const FinishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  };\n\n  const authorInputClass = authorInputHasError ? classes.invalid : classes.control;\n  const textInputClass = textInputHasError ? classes.invalid : classes.control;\n\n  return (\n    <>\n      <Prompt\n        when={isEntering}\n        message={() => 'Are you sure you want to leave?'}\n      />\n      <Card>\n        <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n          <div className={authorInputClass}>\n            <label htmlFor='author'>Author</label>\n            <input\n              type='text'\n              id='author'\n              onChange={authorChangeHandler}\n              onBlur={authorBlurHandler}\n            />\n            {authorInputHasError && <p className='error-message'>Name must not be empty.</p>}\n          </div>\n          <div className={textInputClass}>\n            <label htmlFor='text'>Text</label>\n            <textarea\n              id='text'\n              rows='5'\n              onChange={textChangeHandler}\n              onBlur={textBlurHandler}\n            ></textarea>\n            {textInputHasError && <p className='error-message'>Please type min 5 charts.</p>}\n          </div>\n          <div className={classes.actions}>\n            <button className='btn' onClick={FinishEnteringHandler}>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuote = () => {\n   const { sendRequest, status } = useHttp(addQuote);\n   const history = useHistory();\n\n   useEffect(() => {\n      if (status === 'completed') {\n         history.push({\n            pathname: '/quotes',\n         });\n      }\n\n   }, [status, history]);\n\n   const addQuoteHandler = (quoteData) => {\n      sendRequest(quoteData);\n   };\n\n   return (\n      <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n   );\n};\n\nexport default NewQuote;"],"sourceRoot":""}