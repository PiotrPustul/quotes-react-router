{"version":3,"sources":["hooks/use-input.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","module","exports","NewCommentForm","props","useHttp","addComment","sendRequest","status","error","length","enteredComment","enteredCommentIsValid","commentInputHasError","commentChangeHandler","commentBlurHandler","commentResetState","onAddedComment","useEffect","submitFormHandler","preventDefault","commentData","text","quoteId","commentInputClass","classes","invalid","control","className","form","onSubmit","LoadingSpinner","htmlFor","onChange","onBlur","id","rows","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.43346f63.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useInput = (validateValue) => {\n   const [enteredValue, setEnteredValue] = useState('');\n   const [isTouched, setIsTouched] = useState(false);\n\n   const valueIsValid = validateValue(enteredValue);\n   const hasError = !valueIsValid && isTouched;\n\n   const valueChangeHandler = (event) => {\n      setEnteredValue(event.target.value);\n   };\n\n   const inputBlurHandler = () => {\n      setIsTouched(true);\n   };\n\n   const reset = () => {\n      setEnteredValue('');\n      setIsTouched(false);\n   };\n\n   return {\n      value: enteredValue,\n      isValid: valueIsValid,\n      hasError,\n      valueChangeHandler,\n      inputBlurHandler,\n      reset\n   };\n};\n\nexport default useInput;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"invalid\":\"NewCommentForm_invalid__3l-B1\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport useInput from '../../hooks/use-input';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const {\n    value: enteredComment,\n    isValid: enteredCommentIsValid,\n    hasError: commentInputHasError,\n    valueChangeHandler: commentChangeHandler,\n    inputBlurHandler: commentBlurHandler,\n    reset: commentResetState,\n  } = useInput(value => value.length >= 5);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    if (!enteredCommentIsValid) {\n      return;\n    }\n\n    sendRequest({ commentData: { text: enteredComment }, quoteId: props.quoteId });\n    commentResetState();\n  };\n\n  const commentInputClass = commentInputHasError ? classes.invalid : classes.control;\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={commentInputClass} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea\n          value={enteredComment}\n          onChange={commentChangeHandler}\n          onBlur={commentBlurHandler}\n          id='comment'\n          rows='5'\n        >\n        </textarea>\n        {commentInputHasError && <p className='error-message'>Please type min 5 charts.</p>}\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../../components/UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport { useEffect } from 'react';\n\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n   const match = useRouteMatch();\n   const params = useParams();\n\n   const { quoteId } = params;\n\n   const { sendRequest, status, data: loadedQuote, error } = useHttp(\n      getSingleQuote,\n      true\n   );\n\n   useEffect(() => {\n      sendRequest(quoteId);\n\n   }, [sendRequest, quoteId]);\n\n   if (status === 'pending') {\n      return (\n         <div className=\"centered\">\n            <LoadingSpinner />\n         </div>\n      );\n   }\n\n   if (error) {\n      return <p className=\"centered\">{error}</p>;\n   }\n\n   if (!loadedQuote.text) {\n      return <p>No quote found!</p>;\n   };\n\n   return (\n      <>\n         <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n         <Route path={match.path} exact>\n            <div className=\"centered\">\n               <Link className='btn--flat' to={`${match.url}/comments`}>\n                  Load Comments\n               </Link>\n            </div>\n         </Route>\n         <Route path={`${match.path}/comments`}>\n            <Comments />\n         </Route>\n      </>\n   );\n};\n\nexport default QuoteDetail;"],"sourceRoot":""}