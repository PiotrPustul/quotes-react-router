{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","useState","commentIsValid","setCommentIsValid","commentError","setCommentError","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredComment","current","value","length","commentData","text","quoteId","inputCommentClass","classes","className","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.00d7198d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\",\"input-error\":\"NewCommentForm_input-error__1LuVE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect, useState } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const [commentIsValid, setCommentIsValid] = useState();\n  const [commentError, setCommentError] = useState('');\n\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredComment = commentTextRef.current.value;\n\n    if (enteredComment.length < 5) {\n      setCommentError('Please write something more (min 5 charts)');\n      setCommentIsValid(false);\n    } else {\n      setCommentError('');\n      setCommentIsValid(true);\n    }\n\n    if (!commentIsValid) {\n      return;\n    }\n\n    sendRequest({ commentData: { text: enteredComment }, quoteId: props.quoteId });\n    commentTextRef.current.value = '';\n  };\n\n  const inputCommentClass = commentError && `${classes['input-error']}`;\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef} className={inputCommentClass}></textarea>\n        {commentError && <p className='error-message'>{commentError}</p>}\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../../components/UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport { useEffect } from 'react';\n\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n   const match = useRouteMatch();\n   const params = useParams();\n\n   const { quoteId } = params;\n\n   const { sendRequest, status, data: loadedQuote, error } = useHttp(\n      getSingleQuote,\n      true\n   );\n\n   useEffect(() => {\n      sendRequest(quoteId);\n\n   }, [sendRequest, quoteId]);\n\n   if (status === 'pending') {\n      return (\n         <div className=\"centered\">\n            <LoadingSpinner />\n         </div>\n      );\n   }\n\n   if (error) {\n      return <p className=\"centered\">{error}</p>;\n   }\n\n   if (!loadedQuote.text) {\n      return <p>No quote found!</p>;\n   };\n\n   return (\n      <>\n         <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n         <Route path={match.path} exact>\n            <div className=\"centered\">\n               <Link className='btn--flat' to={`${match.url}/comments`}>\n                  Load Comments\n               </Link>\n            </div>\n         </Route>\n         <Route path={`${match.path}/comments`}>\n            <Comments />\n         </Route>\n      </>\n   );\n};\n\nexport default QuoteDetail;"],"sourceRoot":""}