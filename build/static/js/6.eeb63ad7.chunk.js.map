{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputValid","setAuthorInputValid","textInputValid","setTextInputValid","authorError","setAuthorError","textError","setTextError","authorInputRef","useRef","textInputRef","inputAuthorClass","inputTextClass","when","message","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","length","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","pathname","quoteData"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,cAAc,+BAA+B,QAAU,6B,yFCKnKC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCuF/BC,EAnFG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgDF,qBAAhD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA4CJ,qBAA5C,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAkCR,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBAuCfE,EAAmC,KAAhBP,EAAA,UAAwBX,IAAQ,gBAAmB,GACtEmB,EAAiBN,GAAS,UAAOb,IAAQ,gBAE/C,OACE,qCACE,cAAC,IAAD,CACEoB,KAAMf,EACNgB,QAAS,iBAAM,qCAEjB,cAAC,EAAD,UACE,uBAAMC,QAda,WACvBhB,GAAc,IAauBP,UAAWC,IAAQuB,KAAMC,SA/CtC,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBZ,EAAea,QAAQC,MACvCC,EAAcb,EAAaW,QAAQC,MAEZ,IAAzBF,EAAcI,QAChBnB,EAAe,yBACfJ,GAAoB,KAEpBI,EAAe,IACfJ,GAAoB,IAGlBsB,EAAYC,OAAS,GACvBjB,EAAa,uCACbJ,GAAkB,KAElBI,EAAa,IACbJ,GAAkB,KAGfH,GAAqBE,IAI1BX,EAAMkC,WAAW,CAAEC,OAAQN,EAAeO,KAAMJ,KAqB5C,UACGhC,EAAMqC,WACL,qBAAKpC,UAAWC,IAAQoC,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKtC,UAAWC,IAAQsC,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOxC,UAAWmB,EAAkBsB,KAAK,OAAOC,GAAG,SAASC,IAAK3B,IAChEJ,GAAe,mBAAGZ,UAAU,gBAAb,SAA8BY,OAEhD,sBAAKZ,UAAWC,IAAQsC,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUxC,UAAWoB,EAAgBsB,GAAG,OAAOE,KAAK,IAAID,IAAKzB,IAC5DJ,GAAa,mBAAGd,UAAU,gBAAb,SAA8Bc,OAE9C,qBAAKd,UAAWC,IAAQ4C,QAAxB,SACE,wBAAQ7C,UAAU,MAAM8C,QApCJ,WAC5BvC,GAAc,IAmCN,kC,gBCrDGwC,UAtBE,WACd,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACDC,EAAQG,KAAK,CACVC,SAAU,cAIhB,CAACL,EAAQC,IAMZ,OACG,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBlB,WALvB,SAACwB,GACtBP,EAAYO","file":"static/js/6.eeb63ad7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"input-error\":\"QuoteForm_input-error__1Rmxv\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const [authorInputValid, setAuthorInputValid] = useState();\n  const [textInputValid, setTextInputValid] = useState();\n  const [authorError, setAuthorError] = useState('');\n  const [textError, setTextError] = useState('');\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    if (enteredAuthor.length === 0) {\n      setAuthorError('Please add your name.');\n      setAuthorInputValid(false);\n    } else {\n      setAuthorError('');\n      setAuthorInputValid(true);\n    }\n\n    if (enteredText.length < 5) {\n      setTextError('Please type your quote min 5 charts');\n      setTextInputValid(false);\n    } else {\n      setTextError('');\n      setTextInputValid(true);\n    }\n\n    if (!authorInputValid && !textInputValid) {\n      return;\n    }\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  };\n\n  const FinishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  };\n\n  const inputAuthorClass = authorError !== '' ? `${classes['input-error']}` : '';\n  const inputTextClass = textError && `${classes['input-error']}`;\n\n  return (\n    <>\n      <Prompt\n        when={isEntering}\n        message={() => 'Are you sure you want to leave?'}\n      />\n      <Card>\n        <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input className={inputAuthorClass} type='text' id='author' ref={authorInputRef} />\n            {authorError && <p className='error-message'>{authorError}</p>}\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea className={inputTextClass} id='text' rows='5' ref={textInputRef}></textarea>\n            {textError && <p className='error-message'>{textError}</p>}\n          </div>\n          <div className={classes.actions}>\n            <button className='btn' onClick={FinishEnteringHandler}>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuote = () => {\n   const { sendRequest, status } = useHttp(addQuote);\n   const history = useHistory();\n\n   useEffect(() => {\n      if (status === 'completed') {\n         history.push({\n            pathname: '/quotes',\n         });\n      }\n\n   }, [status, history]);\n\n   const addQuoteHandler = (quoteData) => {\n      sendRequest(quoteData);\n   };\n\n   return (\n      <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n   );\n};\n\nexport default NewQuote;"],"sourceRoot":""}